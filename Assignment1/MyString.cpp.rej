diff a/Assignment1/MyString.cpp b/Assignment1/MyString.cpp	(rejected hunks)
@@ -4,16 +4,42 @@
 {
     MyString::MyString(const char* s)
     {
-        this->str = s;
+        size_t len = 0;
+        const char* c = s;
+        while (*c++ != '\0') {
+            len++;
+        }
+        this->str = new char[len + 1];
+        this->tmpStr = new char[len + 1];
+        int i = 0;
+        for (; i < len; i++) {
+            this->str[i] = s[i];
+            this->tmpStr[i] = s[i];
+        }
+        this->str[i] = '\0';
+        this->tmpStr[i] = '\0';
     }
 
     MyString::MyString(const MyString& other)
     {
+        size_t len = other.GetLength();
+        this->str = new char[len + 1];
+        this->tmpStr = new char[len + 1];
+        int i = 0;
+        for (; i < len; i++) {
+            this->str[i] = other.GetCString()[i];
+            this->tmpStr[i] = other.GetCString()[i];
+        }
+        this->str[i] = '\0';
+        this->tmpStr[i] = '\0';
     }
 
     MyString::~MyString()
     {
-
+        delete this->str;
+        this->str = nullptr;
+        delete this->tmpStr;
+        this->tmpStr = nullptr;
     }
 
     unsigned int MyString::GetLength() const
@@ -39,19 +65,20 @@
         while (*ch++ != '\0') {
             len++;
         }
-
+        
         int newLen = this->GetLength() + len + 1;
-        char* newStr = new char[newLen];
+        int thisLen = this->GetLength();
+        const char* tmp = this->tmpStr;
+        this->str = new char[newLen];
+
         int idx = 0;
-        for (int i = 0; i < this->GetLength(); i++) {
-            newStr[idx++] = this->GetCString()[i];
+        for (int i = 0; i < thisLen; i++) {
+            this->str[idx++] = tmp[i];
         }
         for (int i = 0; i < len; i++) {
-            newStr[idx++] = s[i];
+            this->str[idx++] = s[i];
         }
-        newStr[newLen - 1] = '\0';
-        this->str = newStr;
-        delete newStr;
+        this->str[newLen - 1] = '\0';       
     }
 
     MyString MyString::operator+(const MyString& other) const
@@ -75,6 +102,11 @@
 
     void MyString::Interleave(const char* s)
     {
+        const char* ch = s;
+        size_t len = 0;
+        while (*ch++ != '\0') {
+            len++;
+        }
     }
 
     bool MyString::RemoveAt(unsigned int i)
@@ -100,11 +132,27 @@
 
     void MyString::Reverse()
     {
+        char* s = this->str;
+        char* n = &(this->str[this->GetLength() - 1]);
+        while (s < n) {
+            char tmp = *s;
+            *s = *n;
+            *n = tmp;
+            s++;
+            n--;
+        }
     }
 
     bool MyString::operator==(const MyString& rhs) const
     {
-        return false;
+        const char* s = this->str;
+        const char* n = rhs.GetCString();
+        while (*s == '\0') {
+            if (*s++ != *n++) {
+                return false;
+            }
+        }
+        return true;
     }
 
     MyString& MyString::operator=(const MyString& rhs)
@@ -114,13 +162,19 @@
 
     void MyString::ToLower()
     {
-        const char* s = this->str;
-        while (*s++ != '\0') {
-
+        char* s = this->str;       
+        while (*s != '\0') {
+            *s |= 0x20;
+            s++;
         }
     }
 
     void MyString::ToUpper()
     {
+        char* s = this->str;
+        while (*s != '\0') {
+            *s &= ~0x20;
+            s++;
+        }
     }
 }
\ No newline at end of file
